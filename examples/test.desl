input texture1: texture; // -> layout (location=3) in uint texture_id
input metallic_in: f32; // -> layout (location=4) in f32 metallic_in
input roughness_in: f32; // -> layout (location=5) in f32 roughness_in

// textures -> layout (set=1, binding=0) uniform sampler2D texturesamplers[]
// object -> position, normal, texcoord

// This is the comment
/* 
 *
 * This is multiline comment
 *
 *
 */

fn main(){
    let light_color: vec3 = vec3(1.0);
	
	let ambient_strength: f32 = 0.1;
    let ambient: vec3 = ambient_strength * light_color;
    	
	let norm: vec3 = normalize(normal);
	let light_direction: vec3 = normalize(sbo.data[0]);
	let diff: f32 = max(dot(norm, light_direction), 0.0);
	let diffuse: vec3 = diff * light_color;
	let result: vec3 = (ambient + diffuse) * vec3(texture(texture1, object.uv)); // texture1 -> texturesamplers[id]
	
	return vec4(result, 1.0);
}
